package th.co.ais.ipfm.domain1;
// Generated 27 Ê.¤. 2553, 17:13:55 by Hibernate Tools 3.2.1.GA


import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.Version;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;

import th.co.ais.ipfm.domain.MasterDomain;

/**
 * IpUrAction generated by hbm2java
 */
@Entity
@Table(name="IP_UR_ACTION"
)
public class IpUrAction  extends MasterDomain implements java.io.Serializable,Cloneable {

	@Column(name="UR_NO", length=30)
	private String urNo; 
	
	@Column(name="UR_TYPE", length=5)
	private String urType; 
	
	@Column(name="SUB_UR_NO", length=10)
	private String subUrNo; 
	
	@Column(name="SUB_UR_TYPE", length=5)
	private String subUrType; 
	
	@Column(name="ACTION_SEQ", precision=22, scale=0)
	private BigDecimal actionSeq;
	
	@Column(name="REQ_USER_ID", length=20)
	private String reqestUserId; 
	
	@Column(name="REQ_USER", length=100)
	private String reqestUser; 
	
    @Column(name="REQ_DATE")
	private Date reqestDate; 
	
	@Column(name="ACTION_USER_ID", length=1000)
	private String actionUserId;
	
	@Column(name="ACTION_USER", length=1000)
	private String actionUser; 
	
	@Column(name="ACTION_NAME", length=4000)
	private String actionName; 
	
	@Column(name="UR_STATUS", length=20)
	private String urStatus; 
	
	@Column(name="ACTION_REMARK", length=1000)
	private String actionRemark; 
	
	@Column(name="USER_REMARK", length=1000)
	private String userRemark; 
	
	@Temporal(TemporalType.DATE)
	@Column(name="OLA_DATE", length=7)
	private Date olaDate; 
	
	@Temporal(TemporalType.DATE)
    @Column(name="SLA_DATE", length=7)
	private Date slaDate; 
	
	@Column(name="CALL_FUNCTION_ID", length=100)
	private String callFunctionId; 
	
	@Column(name="CALL_MODE", length=10)
	private String callMode; 
	
	@Id 
 	@GeneratedValue(generator="system-uuid")
	@GenericGenerator(name="system-uuid", strategy = "uuid")
    @Column(name="ROW_ID", unique=true, nullable=false, length=50)
	private String rowId; 
	
	@Version
    @Column(name="VERSION", precision=10, scale=0)
	private Long version; 
	
	@Column(name="SUBJECT", length=1000)
	private String subject; 
	
	@Column(name="CREATE_BY")
	private String createdBy;
	
    @Column(name="CREATE_DATE", length=10)
	private Date created;
	
	@Column(name="UPDATE_BY")
	private String lastUpdBy;
	
    @Column(name="UPDATE_DATE", length=10)
	private Date lastUpd;
	
	@ManyToOne(cascade=CascadeType.ALL,  fetch=FetchType.LAZY)
	@NotFound(action=NotFoundAction.IGNORE)
	@JoinColumns( {
    	@JoinColumn(name = "UR_NO", referencedColumnName = "UR_NO", nullable = false, insertable=false, updatable=false),
    	@JoinColumn(name = "SUB_UR_NO", referencedColumnName = "SUB_UR_NO" , nullable = false, insertable=false, updatable=false)
    })
    public IpUrFirewall firewall;
	
	@ManyToOne(cascade=CascadeType.ALL,  fetch=FetchType.LAZY)
	@NotFound(action=NotFoundAction.IGNORE)
	@JoinColumns( {
    	@JoinColumn(name = "UR_NO", referencedColumnName = "UR_NO", nullable = false, insertable=false, updatable=false),
    	@JoinColumn(name = "SUB_UR_NO", referencedColumnName = "SUB_UR_NO" , nullable = false, insertable=false, updatable=false)
    })
    public IpUrAccessListCdn accessListCdn;

	@ManyToOne(cascade=CascadeType.ALL,  fetch=FetchType.LAZY)
	@NotFound(action=NotFoundAction.IGNORE)
	@JoinColumns( {
    	@JoinColumn(name = "UR_NO", referencedColumnName = "UR_NO", nullable = false, insertable=false, updatable=false),
    	@JoinColumn(name = "SUB_UR_NO", referencedColumnName = "SUB_UR_NO" , nullable = false, insertable=false, updatable=false)
    })
    public IpUrAccessListTnp accessListTnp;

	@ManyToOne(cascade=CascadeType.ALL,  fetch=FetchType.LAZY)
	@NotFound(action=NotFoundAction.IGNORE)
	@JoinColumns( {
    	@JoinColumn(name = "UR_NO", referencedColumnName = "UR_NO", nullable = false, insertable=false, updatable=false),
    	@JoinColumn(name = "SUB_UR_NO", referencedColumnName = "SUB_UR_NO" , nullable = false, insertable=false, updatable=false)
    })
    public IpUrPhysicalInterface phyInterface;

	@ManyToOne(cascade=CascadeType.ALL,  fetch=FetchType.LAZY)
	@NotFound(action=NotFoundAction.IGNORE)
	@JoinColumns( {
    	@JoinColumn(name = "UR_NO", referencedColumnName = "UR_NO", nullable = false, insertable=false, updatable=false),
    	@JoinColumn(name = "SUB_UR_NO", referencedColumnName = "SUB_UR_NO" , nullable = false, insertable=false, updatable=false)
    })
    public IpUrInterfaceGateway gateway;

	@ManyToOne(cascade=CascadeType.ALL,  fetch=FetchType.LAZY)
	@NotFound(action=NotFoundAction.IGNORE)
	@JoinColumns( {
    	@JoinColumn(name = "UR_NO", referencedColumnName = "UR_NO", nullable = false, insertable=false, updatable=false),
    	@JoinColumn(name = "SUB_UR_NO", referencedColumnName = "SUB_UR_NO" , nullable = false, insertable=false, updatable=false)
    })
    public IpUrRouting routing;

	@ManyToOne(cascade=CascadeType.ALL,  fetch=FetchType.LAZY)
	@NotFound(action=NotFoundAction.IGNORE)
	@JoinColumns( {
    	@JoinColumn(name = "UR_NO", referencedColumnName = "UR_NO", nullable = false, insertable=false, updatable=false),
    	@JoinColumn(name = "SUB_UR_NO", referencedColumnName = "SUB_UR_NO" , nullable = false, insertable=false, updatable=false)
    })
    public IpUrF5 f5;	
	
	@Transient
	public int subStrLength = 20;

	public String getCreatedBy() {
		return createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	public Date getCreated() {
		return created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	public String getLastUpdBy() {
		return lastUpdBy;
	}
	
	
	public void setLastUpdBy(String lastUpdBy) {
		this.lastUpdBy = lastUpdBy;
	}
	public String getLastUpdDes(){
		DateFormat dfm = new SimpleDateFormat("dd/MM/yyyy",new Locale("en","EN"));
		return dfm.format(getLastUpd());
	}

	public Date getLastUpd() {
		return lastUpd;
	}

	public void setLastUpd(Date lastUpd) {
		this.lastUpd = lastUpd;
	}

	public String getUrNo() {
		return urNo;
	}

	public void setUrNo(String urNo) {
		this.urNo = urNo;
	}

	public String getUrType() {
		return urType;
	}

	public void setUrType(String urType) {
		this.urType = urType;
	}

	public String getSubUrNo() {
		return subUrNo;
	}

	public void setSubUrNo(String subUrNo) {
		this.subUrNo = subUrNo;
	}

	public String getSubUrType() {
		return subUrType;
	}

	public void setSubUrType(String subUrType) {
		this.subUrType = subUrType;
	}

	public BigDecimal getActionSeq() {
		return actionSeq;
	}

	public void setActionSeq(BigDecimal actionSeq) {
		this.actionSeq = actionSeq;
	}

	public String getReqestUserId() {
		return reqestUserId;
	}

	public void setReqestUserId(String reqestUserId) {
		this.reqestUserId = reqestUserId;
	}

	public String getReqestUser() {
		return reqestUser;
	}

	public void setReqestUser(String reqestUser) {
		this.reqestUser = reqestUser;
	}

	public Date getReqestDate() {
		return reqestDate;
	}

	public void setReqestDate(Date reqestDate) {
		this.reqestDate = reqestDate;
	}

	public String getActionUserId() {
		return actionUserId;
	}

	public void setActionUserId(String actionUserId) {
		this.actionUserId = actionUserId;
	}
	@Transient
    public String getActionUserDesc() {
		String str="";
		if (actionUser!=null && actionUser.trim().length()>0){
			if (actionUser.lastIndexOf(";")==actionUser.trim().length()-1){
				str = actionUser.substring(0, actionUser.length()-1).replaceAll(";", ", <BR>");
			}else{
				str = actionUser.replaceAll(";", ", <BR>");
			}
		}
		return str;
	}
	@Transient
    public String getActionUserSubstr() {
		String str="";
		if (getActionUserDesc()!=null && getActionUserDesc().trim().length()>0) 
			if(getActionUserDesc().trim().length()>50) str = getActionUserDesc().substring(0, 50)+"...";
			else str = getActionUserDesc();
		return str;
	}

	public String getActionUser() {
		return actionUser;
	}

	public void setActionUser(String actionUser) {
		this.actionUser = actionUser;
	}

	public String getActionName() {
		return actionName;
	}

	public void setActionName(String actionName) {
		this.actionName = actionName;
	}

	public String getUrStatus() {
		return urStatus;
	}

	public void setUrStatus(String urStatus) {
		this.urStatus = urStatus;
	}

	public String getActionRemark() {
		return actionRemark;
	}

	public void setActionRemark(String actionRemark) {
		this.actionRemark = actionRemark;
	}

	public String getUserRemark() {
		return userRemark;
	}

	public void setUserRemark(String userRemark) {
		this.userRemark = userRemark;
	}

	public String getCallFunctionId() {
		return callFunctionId;
	}

	public void setCallFunctionId(String callFunctionId) {
		this.callFunctionId = callFunctionId;
	}

	public String getCallMode() {
		return callMode;
	}

	public void setCallMode(String callMode) {
		this.callMode = callMode;
	}

	public String getRowId() {
		return rowId;
	}

	public void setRowId(String rowId) {
		this.rowId = rowId;
	}


	public Long getVersion() {
		return version;
	}

	public void setVersion(Long version) {
		this.version = version;
	}

	public String getSubject() {
		return subject;
	}

	public void setSubject(String subject) {
		this.subject = subject;
	}

	public Date getOlaDate() {
		return olaDate;
	}

	public void setOlaDate(Date olaDate) {
		this.olaDate = olaDate;
	}

	public Date getSlaDate() {
		return slaDate;
	}

	public void setSlaDate(Date slaDate) {
		this.slaDate = slaDate;
	}

	public IpUrFirewall getFirewall() {
		return firewall;
	}

	public void setFirewall(IpUrFirewall firewall) {
		this.firewall = firewall;
	}

	public IpUrAccessListCdn getAccessListCdn() {
		return accessListCdn;
	}

	public void setAccessListCdn(IpUrAccessListCdn accessListCdn) {
		this.accessListCdn = accessListCdn;
	}

	public IpUrAccessListTnp getAccessListTnp() {
		return accessListTnp;
	}

	public void setAccessListTnp(IpUrAccessListTnp accessListTnp) {
		this.accessListTnp = accessListTnp;
	}

	public IpUrPhysicalInterface getPhyInterface() {
		return phyInterface;
	}

	public void setPhyInterface(IpUrPhysicalInterface phyInterface) {
		this.phyInterface = phyInterface;
	}

	public IpUrInterfaceGateway getGateway() {
		return gateway;
	}

	public void setGateway(IpUrInterfaceGateway gateway) {
		this.gateway = gateway;
	}

	public IpUrRouting getRouting() {
		return routing;
	}

	public void setRouting(IpUrRouting routing) {
		this.routing = routing;
	}

	public IpUrF5 getF5() {
		return f5;
	}

	public void setF5(IpUrF5 f5) {
		this.f5 = f5;
	}
	
	@Override
    public Object clone() throws CloneNotSupportedException
    {
		IpUrAction another = (IpUrAction) super.clone();
        return another;
    }

}



